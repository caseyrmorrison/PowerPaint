/*
 * TCSS 305 May 13, 2013 
 */
package powerpaint;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JPanel;

/**
 *
 *
 * @author Casey Morrison
 * @version May 13, 2013
 */
@SuppressWarnings("serial")
public class DrawPanel extends JPanel {
  
  /** The background color of the panel. */
  public static final Color BACKGROUND_COLOR = Color.WHITE;
  
  /** The color to paint with. */
  public static final Color FOREGROUND_COLOR = Color.BLACK;
  
  /** The default size for this JPanel. */
  private static final Dimension DEFUALT_SIZE = new Dimension(400, 300);
  
  /** The width and height of the grid squares. */
  private static final int DEFUALT_GRID_HEIGHT_AND_WIDTH = 10;
  
  /** The point used to reset the points to null. */
  private static final Point NO_POINT = null;
  
  /** The line width. */
  private int my_thickness = 1;

  /** The color of the line. */
  private Color my_color = Color.BLACK;
  
  /** The list of tools. */
  private List<ToolStorage> my_tools;
  
  /** The starting Point of the drawing object. */
  private Point my_point1;
  
  /** The ending Point of the drawing object. */
  private Point my_point2;
  
  /** The boolean value for choosing the drawing, true if it you are drawing an ellipse. */
  private boolean my_ellipse;

  /** The boolean value for choosing the drawing, true if it you are drawing a pencil. */
  private boolean my_pencil = true;

  /** The boolean value for choosing the drawing, true if it you are drawing a rectangle. */
  private boolean my_rectangle;

  /** The boolean value for choosing the drawing, true if it you are drawing a line. */
  private boolean my_line;
  
  /**
   * The path being created.
   */
  private GeneralPath my_path;

  /** The variable used for turning the grid on and off, true is on false is off. */
  private boolean my_grid_value;
  
  
  /**
   * Constructs a new draw panel.
   */
  public DrawPanel() {
    super();
    setPreferredSize(DEFUALT_SIZE);
    setBackground(BACKGROUND_COLOR);
    my_path = new GeneralPath();
    my_tools = new ArrayList<ToolStorage>();
  }
  
  /** Sets the drawing to a line. */
  public void setLineDraw() {
    my_pencil = false;
    my_line = true;
    my_rectangle = false;
    my_ellipse = false;
    resetPoints();
  }
  
  /** Sets the drawing to a pencil. */
  public void setPencilDraw() {
    my_pencil = true;
    my_line = false;
    my_rectangle = false;
    my_ellipse = false;
    resetPoints();
  }
  
  /** Sets the drawing to a ellipse. */
  public void setEllipseDraw() {
    my_pencil = false;
    my_line = false;
    my_rectangle = false;
    my_ellipse = true;
    resetPoints();
  }
  
  /** Sets the drawing to a rectangle. */
  public void setRectangleDraw() {
    my_pencil = false;
    my_line = false;
    my_rectangle = true;
    my_ellipse = false;
    resetPoints();
  }
  
  /**
   * Records the start point when the mouse is clicked.
   * @param the_point - the point used to start the object for drawing.
   */
  public void recordStartPoint(final Point the_point) {  
    my_point1 = the_point;
    my_point2 = NO_POINT;
    my_path.moveTo(the_point.x, the_point.y);
  }
  
  /**
   * Records the points while the mouse is being dragged.
   * @param the_point - the point that is returned from the mouse listener while dragged.
   */
  public void recordDragPoint(final Point the_point) {
    my_point2 = (Point) the_point.clone();
    if (my_pencil) {
      my_path.lineTo(my_point2.x, my_point2.y);
    }
    repaint();
  }
  
  /** 
   * Records the point from the mouse listener once the mouse is released.
   * @param the_point - the point used for the final point in the drawn object.
   */
  public void recordFinalPoint(final Point the_point) {
    my_point2 = (Point) the_point.clone();
    if (my_pencil) {
      my_path.moveTo(my_point2.x, my_point2.y);
      keepShape((Shape) my_path);
      my_path = new GeneralPath();
    } else if (my_line) {
      keepShape(new Line2D.Double(my_point1, my_point2));
    } else if (my_rectangle) {
      keepShape(new Rectangle2D.Double(my_point1.x, my_point1.y, my_point2.x - my_point1.x,
                                        my_point2.y - my_point1.y));
    } else if (my_ellipse) {
      keepShape(new Ellipse2D.Double(my_point1.x, my_point1.y, my_point2.x - my_point1.x,
                                        my_point2.y - my_point1.y));
    }
    repaint();
  }
  
  /**
   * This method keeps the shape in a ToolStorage object.
   * @param the_shape - the shape passed to the new storage object.
   */
  public void keepShape(final Shape the_shape) {
    final ToolStorage shape = new ToolStorage(the_shape, my_color, my_thickness);
    my_tools.add(shape);
  }
  
  /** Resets the start and end points used for drawing. */
  private void resetPoints() {
    my_point1 = NO_POINT;
    my_point2 = NO_POINT;
  }
  
  /**
   * Sets if the grid is visible.
   * The grid has squares that are 10x10 pixels.
   * @param the_grid_value - the boolean value which turns the grid on or off.
   */
  public void setGrid(final boolean the_grid_value) {
    my_grid_value = the_grid_value;
  }
  
  /** {@inheritDoc} */
  @Override
  public void paintComponent(final Graphics the_graphics) {
    super.paintComponent(the_graphics);
    final Graphics2D g2d = (Graphics2D) the_graphics;
    
    g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
    g2d.setPaint(my_color);
    g2d.setStroke(new BasicStroke(my_thickness));
      
    drawShapes(g2d);
      
    if (my_line && my_point2 != null) {
      g2d.drawLine(my_point1.x, my_point1.y, my_point2.x, my_point2.y);
    } else if (my_rectangle && my_point2 != null) {
      g2d.drawRect(my_point1.x, my_point1.y, my_point2.x - my_point1.x,
                   my_point2.y - my_point1.y);
    } else if (my_ellipse && my_point2 != null) {
      g2d.drawOval(my_point1.x, my_point1.y, my_point2.x - my_point1.x,
                   my_point2.y - my_point1.y);
    } else if (my_pencil && my_point2 != null) {
      my_path.moveTo(my_point2.x, my_point2.y);
      g2d.draw(my_path);
    }   
    drawGrid(g2d);
  }
  
  /**
   * Sets the color of the graphics object.
   * @param the_color - the color the line will be changed to.
   */
  public void setColor(final Color the_color) {
    my_color = the_color;
  }
  
  /**
   * Draws the grid on the drawing panel if the my_grid_value is true.
   * @param the_g2d - The graphic used to draw the lines for the grid.
   */
  private void drawGrid(final Graphics2D the_g2d) {
    if (my_grid_value) {
      for (int i = 0; i < getWidth(); i += DEFUALT_GRID_HEIGHT_AND_WIDTH) {
        the_g2d.setPaint(Color.GRAY);
        the_g2d.setStroke(new BasicStroke(1));
        the_g2d.drawLine(i, 0, i, getWidth());
        the_g2d.drawLine(0, i, getWidth(), i);
      }
    }
  }
  
  /**
   * Draws the shapes from the list holding the ToolStorage objects 
   * that contain the shapes, colors and thickness.
   * @param the_g2d - The graphic used to draw the shapes.
   */
  private void drawShapes(final Graphics2D the_g2d) {
    for (int j = 0; j < my_tools.size(); j++) {
      the_g2d.setPaint(my_tools.get(j).getColor());
      the_g2d.setStroke(new BasicStroke(my_tools.get(j).getWidth()));
      the_g2d.draw(my_tools.get(j).getShape());
    }
  }
  
  /**
   * Gets the current color.
   * @return my_color - the current color used for drawing.
   */
  public Color getColor() {
    return my_color;
  }
  
  /**
   * Sets the thickness of the tools being drawn.
   * @param the_thickness - the values of how thick each tools lines are.
   */
  public void setThickness(final int the_thickness) {
    my_thickness = the_thickness;
  }

  /**
   * Clears the drawing panel of all drawings.
   */
  public void clearAll() {
    my_tools = new ArrayList<ToolStorage>();
    resetPoints();
    repaint();
  }
}
